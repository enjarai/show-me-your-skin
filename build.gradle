plugins {
	id 'fabric-loom' version '1.8-SNAPSHOT'
	id 'maven-publish'
	id "me.modmuss50.mod-publish-plugin" version "0.4.4"
	id 'me.fallenbreath.yamlang' version '1.3.1'
}

sourceCompatibility = JavaVersion.VERSION_21
targetCompatibility = JavaVersion.VERSION_21

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

repositories {
	// Add repositories to retrieve artifacts from in here.
	// You should only use this when depending on other mods because
	// Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
	// See https://docs.gradle.org/current/userguide/declaring_repositories.html
	// for more information about repositories.

	maven { url = "https://maven.enjarai.dev/releases" }
	maven { url = "https://maven.enjarai.dev/mirrors" }

	// Mod Menu repository
	maven { url "https://maven.terraformersmc.com" }

	// Cardinal Components API
	maven {
		name = "Ladysnake Mods"
		url = 'https://maven.ladysnake.org/releases'
	}
}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${property("deps.minecraft")}"
	mappings "net.fabricmc:yarn:${property("deps.yarn")}:v2"
	modImplementation "net.fabricmc:fabric-loader:${property("deps.fabricloader")}"

	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${property("deps.fabric-api")}"

	modImplementation("nl.enjarai:cicada-lib:${property("deps.cicada")}") {
		exclude group: "net.fabricmc.fabric-api"
	}

	// Mod Menu integration.
	modImplementation "com.terraformersmc:modmenu:${property("deps.modmenu")}"

	// Cardinal Components for shrimpleâ„¢ server syncing.
	modImplementation(include("org.ladysnake.cardinal-components-api:cardinal-components-base:${property("deps.cardinal-components-api")}"))
	modImplementation(include("org.ladysnake.cardinal-components-api:cardinal-components-entity:${property("deps.cardinal-components-api")}"))

	// Make it easier to test skin compat.
//	modImplementation 'com.ptsmods:devlogin:2.1'
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

version = "$version+${property("deps.minecraft")}"

tasks.withType(JavaCompile).configureEach {
	// Minecraft 1.18 (1.18-pre2) upwards uses Java 17.
	it.options.release = 21
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.archivesBaseName}"}
	}
}

yamlang {
	targetSourceSets = [sourceSets.main]
	inputDir = "assets/showmeyourskin/lang"
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}

loom {
	accessWidenerPath = file("src/main/resources/showmeyourskin.accesswidener")
}

publishMods {
	file = remapJar.archiveFile
	displayName = "${property('mod_version')} for ${property('deps.minecraft')}"
	version = project.version
	changelog = getRootProject().file("CHANGELOG.md").text
	type = STABLE
	modLoaders.add("fabric")

	def min = property('publish_target_min')
	def max = property('publish_target_max')

	if (providers.gradleProperty('enjaraiModrinthToken').present) {
		modrinth {
			projectId = property('mod_modrinth')
			accessToken = providers.gradleProperty('enjaraiModrinthToken').get()

			if (min == max) {
				minecraftVersions.add(min)
			} else {
				minecraftVersionRange {
					start = min
					end = max
				}
			}

			requires {
				slug = "fabric-api"
			}
			requires {
				slug = "cicada"
			}
			embeds {
				slug = "cardinal-components-api"
			}
		}
	}

	if (providers.gradleProperty('enjaraiCurseforgeToken').present) {
		curseforge {
			projectId = property('mod_curseforge')
			accessToken = providers.gradleProperty('enjaraiCurseforgeToken').get()

			if (min == max) {
				minecraftVersions.add(min)
			} else {
				minecraftVersionRange {
					start = min
					end = max
				}
			}

			requires {
				slug = "fabric-api"
			}
			requires {
				slug = "cicada"
			}
			embeds {
				slug = "cardinal-components-api"
			}
		}
	}

	if (providers.gradleProperty('enjaraiGithubToken').present) {
		github {
			repository = property('mod_github')
			accessToken = providers.gradleProperty('enjaraiGithubToken').get()

			commitish = property('git_branch')
			tagName = project.version
		}
	}
}