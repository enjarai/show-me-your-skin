# Automatically build the project and run any configured tests for every push
# and submitted pull request. This can help catch issues that only occur on
# certain platforms or Java versions, and provides a first line of defence
# against bad commits.

name: Build & Upload
on: [pull_request, push]

env:
  MOD_VERSION: 'latest' # fallback for version flex
  MINECRAFT_VERSION: ''

jobs:
  build:
    strategy:
      matrix:
        java: [ 21 ]
        java-distribution: ['corretto']
        os: [ubuntu-latest, windows-latest]
        include:
        - os: ubuntu-latest
          upload-artifacts: true
        - os: windows-latest
          upload-artifacts: false
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4

      - name: Retrieve Mod/MC Version # just a little flex
        if: contains(matrix.os, 'ubuntu') && matrix.upload-artifacts
        run: |
          mod_version=$(grep '^mod_version' gradle.properties | awk -F ' = ' '{print $2}')
          minecraft_version=$(grep '^deps.minecraft' gradle.properties | awk -F '=' '{print $2}')
          echo "MOD_VERSION=$mod_version" >> $GITHUB_ENV
          echo "MINECRAFT_VERSION=$minecraft_version" >> $GITHUB_ENV
          
      - name: Validate Gradle Wrapper
        uses: gradle/actions/wrapper-validation@v3
        
      - name: Setup JDK ${{ matrix.java }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ matrix.java }}
          distribution: ${{ matrix.java-distribution }}
          
      - name: chmod Gradle Wrapper
        if: contains(matrix.os, 'ubuntu')
        run: chmod +x gradlew
        
      - name: Build
        run: ./gradlew build
        
      - name: Upload Artifacts
        if: matrix.upload-artifacts
        uses: actions/upload-artifact@v4
        with:
          name: show-me-your-skin_${{ env.MOD_VERSION }}+${{ env.MINECRAFT_VERSION }}
          path: build/libs/
